#!/bin/bash

source "$(dirname "$0")/variables"

# seperated by tabs: title options cmd keybind tag
# title must be unique
# empty tag will cause to always open new instance
dropdowns=(
  "SHELL"$'\t'" "$'\t'"$SHELL"$'\t'"$mod T"$'\t'"31"
  "octave"$'\t'" "$'\t'"octave-cli"$'\t'"$mod C"$'\t'"30"
  "dashboard"$'\t'"--option window.dimensions.columns=155 --option window.dimensions.lines=45"$'\t'"$HOME/.local/bin/tmux-dashboard"$'\t'"None XF86Launch1"$'\t'"29"
  "mail"$'\t'"--option window.dimensions.columns=155 --option window.dimensions.lines=45"$'\t'"aerc"$'\t'"$mod M"$'\t'""
  "music"$'\t'" "$'\t'"$HOME/.local/bin/fzmp"$'\t'"$mod P"$'\t'""
  "gopass"$'\t'" "$'\t'"$HOME/.local/bin/gcp"$'\t'"$mod S"$'\t'""
)

if [[ "$#" -eq "0" ]]
then
  # without args do the keybinds
  for dropdown in "${dropdowns[@]}"
  do
    IFS=$'\t' read -r title options cmd keybind tag <<< "$dropdown"
    riverctl map normal $keybind spawn "'$0' '$title'"
  done
else
  for dropdown in "${dropdowns[@]}"
  do
    IFS=$'\t' read -r title options cmd keybind tag <<< "$dropdown"
    [ "$title" == "$1" ] || continue

    if [[ "$tag" != "" ]]
    then
      tagmask=$((1 << ($tag - 1)))
      lswt --tsv | while IFS=$'\t' read -r t c w x y z o
      do
        [[ \"$title\" == $t ]] || continue
        [[ \"$dropdown_class\" == $c ]] || continue

        riverctl focus-output $(echo $o | sed -e 's/"//g')
        riverctl toggle-focused-tags $tagmask
        exit 1 # no need to continue
      done || exit
      # If we got this far, window isn't available and we need to spawn it
      riverctl spawn-tagmask $tagmask
      riverctl toggle-focused-tags $tagmask
    fi
    exec $term --title "$title" $options --class "$dropdown_class" -e "$cmd"
  done
fi
