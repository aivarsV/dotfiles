#!/usr/bin/python
# Prefer Python 3.7
import subprocess
import sys
import os
import re
from uuid import uuid1
import email
from email import policy, message
import imghdr
import smtplib
import base64
import xoauthHelper
from os import path


SIGNATURES_DIR = path.expanduser('~/.mail_signatures')

class SmtpCredentials:
    def __init__(self, passwd, args):
        self._passwd = passwd
        self._use_xoauth = False
        for a in args:
            if a.startswith('mbsync-User: '):
                self._username = a.split(':')[-1].strip()
            if a.startswith('smtp-Host: '):
                self.host = a.split(':')[-1].strip()
            if a == 'type: xoauth-refresh-token':
                self._use_xoauth = True

    def logIn(self, smtp):
        smtp.starttls()
        if self._use_xoauth:
            authString = 'user=%s\1auth=Bearer %s\1\1' % (self._username, self._passwd)
            smtp.docmd('AUTH', 'XOAUTH2 ' + str(base64.b64encode(bytes(authString, 'ascii')), 'ascii'))
        else:
            smtp.login(self._username, self._passwd)


def compileMessage():
    msg = email.message_from_file(sys.stdin, policy=policy.default)
    sender = re.search(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+', 
                        msg['From']).group(0)
    domain = sender.split('@')[-1]
    
    plainMsg = msg.get_body()
    if isinstance(plainMsg, message.EmailMessage):
        markdown = plainMsg.get_payload()
    else:
        markdown = plainMsg
        plainMsg = msg

    signatureFile = path.join(SIGNATURES_DIR, sender)
    if path.isfile(signatureFile):
        with open(signatureFile, 'r') as f:
            markdown += '\n\n---\n' + f.read()

    related = []
    substituted = markdown
    extraSuffix = str(uuid1())
    for m in re.finditer(r'\!\[((\s|\w)*)\]\((?!http)(.+)\)', markdown):
        fPath = os.path.expanduser(m.group(3))
        if os.path.isfile(fPath):
            newId = str(uuid1()) + '@' + domain
            related.append((fPath, newId))
            substituted = substituted.replace(
                        m.group(0),
                        '![{0}](cid:{1})'.format(m.group(1), newId + extraSuffix)
                    )

        else:
            print('No such file:' + m.group(3))

    html = subprocess.run(
                ['pandoc', '--to', 'html', '-s', '--metadata', 'pagetitle=' + msg['Subject']],
                input=substituted,
                capture_output=True, encoding=sys.stdin.encoding
            ).stdout.replace(extraSuffix, '')


    plainMsg.set_content(substituted.replace(extraSuffix, ''))
    plainMsg.add_alternative(html, subtype='html')
    htmlMsg = plainMsg.get_payload()[1]

    for r in related:
        with open(r[0], 'rb') as f:
            img_data = f.read()
        htmlMsg.add_related(img_data, maintype='image',
                                 subtype=imghdr.what(None, img_data),
                                 filename=os.path.basename(r[0]),
                                 cid='<{}>'.format(r[1]),
                                 disposition='inline')

    for a in msg.iter_attachments():
        if a.get_content_maintype() == 'text':
            if a['Content-Transfer-Encoding'] != 'base64':
                a.set_content(a.get_payload(), 
                        subtype=a.get_content_subtype(),
                        filename=a.get_filename(),
                        cte='base64')

    return (msg, sender)


def getCredentials(sender):
    accountPath = subprocess.run(
                ['gopass', 'grep', 'mbsync-User: ' + sender],
                capture_output=True, encoding=sys.stdin.encoding
                ).stdout.split('\n')[0][:-len(' matches')]

    credential_results = subprocess.run(
                ['gopass', 'show', accountPath],
                capture_output=True, encoding=sys.stdin.encoding
                )
    assert credential_results.returncode == 0, f'Have you forgot to set correct sender? Currently: <{sender}>'
    lines = credential_results.stdout.split('\n')

    return SmtpCredentials(
            xoauthHelper.RefreshToken(sender, lines[0]) if 'type: xoauth-refresh-token' in lines else lines[0],
            lines[1:])


def sendMessage(msg, sender):
    creds = getCredentials(sender)
    with smtplib.SMTP(host=creds.host, port=587) as conn:
        creds.logIn(conn)
        conn.send_message(msg)


if __name__ == '__main__':
    sendMessage(*compileMessage())

