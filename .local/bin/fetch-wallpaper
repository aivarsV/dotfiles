#!/usr/bin/python

from requests import get as get_url
from html.parser import HTMLParser
from tempfile import TemporaryDirectory
from os.path import join as joinpath
from os.path import dirname
from os import listdir, getenv, remove
from random import shuffle
from subprocess import run
from sys import argv

class LoaderBase(object): pass

class NasaImage(HTMLParser, LoaderBase):
    def __init__(self, current_image):
        super().__init__()
        self.hrefs = []
        self.image_link = None

        domain = 'https://apod.nasa.gov/'
        resp = get_url(domain + 'apod/astropix.html', timeout=20)
        resp.raise_for_status()
        self.feed(resp.text)
        assert(self.image_link is not None)

        if not self.image_link.startswith('https://'):
            self.image_link = domain + self.image_link

    def handle_starttag(self, tag, attrs):
        if self.image_link is None:
            if tag == 'a':
                for attr, val in attrs:
                    if attr == 'href':
                        self.hrefs.append(val)
                        break

            elif tag == 'img':
                self.image_link = self.hrefs.pop()

    def handle_endtag(self, tag):
        if self.image_link is None:
            if tag.lower() == 'a':
                self.hrefs.pop()

class DonttakepicturesImage(HTMLParser, LoaderBase):
    def __init__(self, current_image):
        super().__init__()
        self.noscripts = []
        self.image_link = None

        resp = get_url('https://www.donttakepictures.com/photo-of-the-day', timeout=20)
        resp.raise_for_status()
        self.feed(resp.text)
        assert(self.image_link is not None)


    def handle_starttag(self, tag, attrs):
        if self.image_link is None:
            if tag == 'noscript':
                self.noscripts.append(tag)

            elif tag == 'img':
                if len(self.noscripts) > 0:
                    for attr, val in attrs:
                        if attr == 'src':
                            self.image_link = val
                            break

    def handle_endtag(self, tag):
        if self.image_link is None:
            if tag.lower() == 'noscript':
                self.noscripts.pop()


class SmithsonianImage(HTMLParser, LoaderBase):
    def __init__(self, current_image):
        super().__init__()
        self.divs = []
        self.image_link = None

        resp = get_url('https://www.smithsonianmag.com/photocontest/photo-of-the-day/', timeout=20)
        resp.raise_for_status()
        self.feed(resp.text)
        assert(self.image_link is not None)


    def handle_starttag(self, tag, attrs):
        if self.image_link is None:
            if tag == 'div':
                self.divs.append(attrs)

            elif tag == 'img':
                tag_found = False
                if len(self.divs) > 0:
                    for a, v in self.divs[-1]:
                        if a == 'class' and v == 'slideshow-wrap':
                            tag_found = True
                            break
                    if tag_found:
                        for attr, val in attrs:
                            if attr == 'src':
                                self.image_link = val
                                break

    def handle_endtag(self, tag):
        if self.image_link is None:
            if tag.lower() == 'div':
                self.divs.pop()

class Pobble365Image(HTMLParser, LoaderBase):
    def __init__(self, current_image):
        super().__init__()
        self.image_link = None

        resp = get_url('https://www.pobble365.com/', timeout=20)
        resp.raise_for_status()
        self.feed(resp.text)
        assert(self.image_link is not None)

    def handle_starttag(self, tag, attrs):
        if self.image_link is None:
            if tag == 'img':
                src = None
                tag_found = False
                for attr, val in attrs:
                    if attr == 'class' and val == 'full-screen__picture':
                        tag_found = True
                    if attr == 'src':
                        src = val
                if tag_found:
                    self.image_link = src

    def handle_endtag(self, tag):
        pass

class BiggeekdadImage(HTMLParser, LoaderBase):
    def __init__(self, current_image):
        super().__init__()
        self.figures = []
        self.image_link = None

        resp = get_url('https://biggeekdad.com/photo-of-the-day/', timeout=20,
                        headers={'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0'})
        resp.raise_for_status()
        self.feed(resp.text)
        assert(self.image_link is not None)


    def handle_starttag(self, tag, attrs):
        if self.image_link is None:
            if tag == 'figure':
                self.figures.append(tag)

            elif tag == 'img':
                if len(self.figures) > 0:
                    for attr, val in attrs:
                        if attr == 'src':
                            self.image_link = val
                            break

    def handle_endtag(self, tag):
        if self.image_link is None:
            if tag.lower() == 'figure':
                self.figures.pop()


def main():
    # get current image, if any
    wallsdir = getenv('WALLPAPERS_DIR')
    current = listdir(wallsdir)
    if len(current) == 0:
        current = ''
    else:
        current = current[0]
    # select source and try to download new image
    loaders = LoaderBase.__subclasses__()
    shuffle(loaders)
    new = None
    with TemporaryDirectory() as d:
        for l in loaders:
            try:
                link = l(current).image_link
                fname = link.split('/')[-1]
                assert current != fname

                resp = get_url(link, stream=True, timeout=20)
                resp.raise_for_status()
                with open(joinpath(d, fname), 'wb') as f:
                    for chunk in resp.iter_content(chunk_size=512):
                        if chunk:
                            f.write(chunk)

                new = fname
                break
            except Exception as e:
                print(e)
    # if success, copy to home, remove current and update wallpaper
        if new is not None:
            print('Got new image:', new)
            run(['convert', '-resize', '1920x1080', joinpath(d, new), joinpath(wallsdir, new)])

    if new is not None:
        if current != '':
            remove(joinpath(wallsdir, current))
        changer = joinpath(dirname(argv[0]), 'screen-ctrl')
        run([changer, 'wallpaper'])


if __name__ == '__main__':
    main()
