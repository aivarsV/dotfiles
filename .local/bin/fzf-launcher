#!/bin/bash
# Program launcher for river
# intended to run in terminal


TMUX_SESSION_SOURCE="$HOME/.config/tmux-sessions/"
list_tmux_sessions() {
  if [[ -d "$TMUX_SESSION_SOURCE" ]]
  then
    find -L "$TMUX_SESSION_SOURCE" -maxdepth 1 -mindepth 1 -type f -printf "tmux-session %f\n"
  fi
  tmux ls -F 'tmux-session #S' 2>>/dev/null
}

list_options() {
  # executables, available from PATH
  echo -n "$PATH" | xargs -d : -I{} -r -- find -L {} -maxdepth 1 -mindepth 1 -type f -executable -printf "%f\n" | sort -u
  # tmux sessions
  list_tmux_sessions | sort -u
  # QEMU user session virtual machines
  virsh list --all --name | xargs echo vm_start_and_attach | sort -u
  # QEMU system virtual machines
  virsh -c "qemu:///system" list --all --name | xargs echo vm_start_and_attach_system | sort -u
}

prompt_user() {
  list_options | fzf --reverse --tiebreak=index -e --print-query --expect=ctrl-space --cycle --bind=tab:down,btab:up --expect=alt-enter --no-info
}


################################
#   Main starts here
################################

#declare $(parse_input) >> /dev/null # reduce output in case of cancelled input
INPUT_ARGS=(QUERY LAUNCH_TYPE MATCH)

i=0
while read line
do
  eval "${INPUT_ARGS[i++]}='$line'"
done <<< $(prompt_user)

if [[ -z "$MATCH" ]]
then # user cancelled, or custom command
  if [[ -z "$QUERY" ]]
  then
    exit # user cancelled
  fi

  MATCH="$QUERY"
fi

if [ "$LAUNCH_TYPE" == "alt-enter" ]
then
  # alt+enter to launch in new terminal
  COMMAND=`echo $MATCH | awk '{print $1;}'`
  if which $COMMAND >> /dev/null 2>&1
  then
    MATCH=`echo exec $MATCH`
  fi

  tmp_script=`mktemp --tmpdir 'XXXXXXXXXXXXX'`
  chmod u+x $tmp_script

  cat >> $tmp_script << EOL
#!$SHELL
[[ -f ~/.config/bash/functions ]] && . ~/.config/bash/functions
    rm $tmp_script
    sleep 0.5
    $MATCH
EOL
  riverctl spawn "alacritty --option window.class.instance=$COMMAND -e $tmp_script"
else
  if [[ "$MATCH" == "vm_start_and_attach "* ]]
  then
    vm_name=${MATCH#* }
    virsh start $vm_name ; riverctl spawn "virt-viewer -f $vm_name"
  elif [[ "$MATCH" == "vm_start_and_attach_system "* ]]
  then
    vm_name=${MATCH#* }
    virsh -c 'qemu:///system' start $vm_name ; riverctl spawn "virt-viewer -c 'qemu:///system' -f $vm_name"
  else
    # graphical wayland app or xwayland app
    riverctl spawn "$MATCH"
  fi
fi
